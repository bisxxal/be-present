generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  timeTables  TimeTable[]
  attendances Attendance[]

  @@index([id])
}

model TimeTable {
  id          String   @id @default(cuid())
  subjectName String
  startTime   String // e.g., "08:00"
  endTime     String
  dayOfWeek   Int? // 0 = Sunday, 1 = Monday, ..., 6 = Saturday

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  attendance Attendance[]
  createdAt  DateTime     @default(now())

  @@index([userId])
  @@index([subjectName])
}

model Attendance {
  id      String   @id @default(cuid())
  date    DateTime
  present Boolean  @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  timeTableId String
  timeTable   TimeTable @relation(fields: [timeTableId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([timeTableId, date])
  @@unique([userId, timeTableId, date], name: "userId_timeTableId_date")

}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
